import { describe, it, expect, vi, beforeEach } from 'vitest'
import { NextRequest } from 'next/server'
import { POST } from '../route'
import { UserAuthManager } from '@/lib/userAuth'

// Mock UserAuthManager
vi.mock('@/lib/userAuth', () => ({
  UserAuthManager: {
    validateUserAccess: vi.fn(),
    generateMyEventsLink: vi.fn(),
  },
}))

describe('/api/user/validate', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  it('should validate correct email and token', async () => {
    const email = 'test@example.com'
    const token = 'valid-token'

    // Mock successful validation
    vi.mocked(UserAuthManager.validateUserAccess).mockReturnValue(true)

    const request = new NextRequest('http://localhost/api/user/validate', {
      method: 'POST',
      body: JSON.stringify({ email, token }),
    })

    const response = await POST(request)
    const result = await response.json()

    expect(response.status).toBe(200)
    expect(result).toEqual({
      valid: true,
      email: email,
    })
    expect(UserAuthManager.validateUserAccess).toHaveBeenCalledWith(email, token)
  })

  it('should reject invalid email and token', async () => {
    const email = 'test@example.com'
    const token = 'invalid-token'

    // Mock failed validation
    vi.mocked(UserAuthManager.validateUserAccess).mockReturnValue(false)

    const request = new NextRequest('http://localhost/api/user/validate', {
      method: 'POST',
      body: JSON.stringify({ email, token }),
    })

    const response = await POST(request)
    const result = await response.json()

    expect(response.status).toBe(200)
    expect(result).toEqual({
      valid: false,
      email: null,
    })
    expect(UserAuthManager.validateUserAccess).toHaveBeenCalledWith(email, token)
  })

  it('should return 400 for missing email', async () => {
    const request = new NextRequest('http://localhost/api/user/validate', {
      method: 'POST',
      body: JSON.stringify({ token: 'some-token' }),
    })

    const response = await POST(request)
    const result = await response.json()

    expect(response.status).toBe(400)
    expect(result).toEqual({
      error: 'Email and token are required',
    })
    expect(UserAuthManager.validateUserAccess).not.toHaveBeenCalled()
  })

  it('should return 400 for missing token', async () => {
    const request = new NextRequest('http://localhost/api/user/validate', {
      method: 'POST',
      body: JSON.stringify({ email: 'test@example.com' }),
    })

    const response = await POST(request)
    const result = await response.json()

    expect(response.status).toBe(400)
    expect(result).toEqual({
      error: 'Email and token are required',
    })
    expect(UserAuthManager.validateUserAccess).not.toHaveBeenCalled()
  })

  it('should return 400 for empty request body', async () => {
    const request = new NextRequest('http://localhost/api/user/validate', {
      method: 'POST',
      body: JSON.stringify({}),
    })

    const response = await POST(request)
    const result = await response.json()

    expect(response.status).toBe(400)
    expect(result).toEqual({
      error: 'Email and token are required',
    })
    expect(UserAuthManager.validateUserAccess).not.toHaveBeenCalled()
  })

  it('should handle JSON parsing errors', async () => {
    const request = new NextRequest('http://localhost/api/user/validate', {
      method: 'POST',
      body: 'invalid-json',
    })

    const response = await POST(request)

    expect(response.status).toBe(500)
    expect(UserAuthManager.validateUserAccess).not.toHaveBeenCalled()
  })

  it('should handle UserAuthManager errors', async () => {
    const email = 'test@example.com'
    const token = 'some-token'

    // Mock UserAuthManager to throw an error
    vi.mocked(UserAuthManager.validateUserAccess).mockImplementation(() => {
      throw new Error('Validation service error')
    })

    const request = new NextRequest('http://localhost/api/user/validate', {
      method: 'POST',
      body: JSON.stringify({ email, token }),
    })

    const response = await POST(request)
    const result = await response.json()

    expect(response.status).toBe(500)
    expect(result).toEqual({
      error: 'Validation failed',
    })
  })

  it('should validate tokens generated by UserAuthManager', async () => {
    // Generate a real token using UserAuthManager
    const email = 'test@example.com'
    const link = 'http://localhost/my_events?email=test%40example.com&token=valid-token-123'

    // Mock the generateMyEventsLink method
    vi.mocked(UserAuthManager.generateMyEventsLink).mockReturnValue(link)

    const generatedLink = UserAuthManager.generateMyEventsLink(email)

    // Extract token from the generated link
    const url = new URL(generatedLink, 'http://localhost')
    const token = url.searchParams.get('token')

    // Mock the validation to return true (since we're testing the API, not the token logic)
    vi.mocked(UserAuthManager.validateUserAccess).mockReturnValue(true)

    const request = new NextRequest('http://localhost/api/user/validate', {
      method: 'POST',
      body: JSON.stringify({ email, token }),
    })

    const response = await POST(request)
    const result = await response.json()

    expect(response.status).toBe(200)
    expect(result).toEqual({
      valid: true,
      email: email,
    })
    expect(UserAuthManager.validateUserAccess).toHaveBeenCalledWith(email, token)
  })
})
